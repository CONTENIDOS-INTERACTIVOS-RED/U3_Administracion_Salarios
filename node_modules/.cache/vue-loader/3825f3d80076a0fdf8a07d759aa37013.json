{"remainingRequest":"/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/src/views/curso/Tema2.vue?vue&type=template&id=350e20aa&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/src/views/curso/Tema2.vue","mtime":1742965596490},{"path":"/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Administracion_Salarios/U3_Administracion_Salarios/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}